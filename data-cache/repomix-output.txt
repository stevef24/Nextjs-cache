This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-05-16T16:33:47.953Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/
  cached-page-test/
    page.tsx
  components/
    CharacterSummary.tsx
    RickandMortyCardProps.tsx
  no-store-test/
    page.tsx
  on-demand-revalidate-test/
    page.tsx
  revalidate-test/
    page.tsx
  globals.css
  helpers.ts
  layout.tsx
  page.tsx
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/cached-page-test/page.tsx
================
import Link from "next/link";
import RickandMortyCard from "../components/RickandMortyCardProps";
import { getData } from "../helpers";

const RICK_AND_MORTY_API_URL = "https://rickandmortyapi.com/api/character";

export default async function CachedPageTest() {
	console.log("\n--- [Cached Page Test Render] START ---");

	console.log("[Cached Page Test] Attempting fetch (should hit Data Cache)...");
	const characters = await getData(RICK_AND_MORTY_API_URL, {
		cache: "force-cache",
	});
	console.log("[Cached Page Test] Fetch processed.");

	console.log("--- [Cached Page Test Render] END ---");

	return (
		<div className="p-8">
			<h1 className="text-3xl font-bold mb-6 text-center">Cached Page Test</h1>
			<p className="text-center mb-4">
				This page attempts to fetch the same data as the Home page. If the Data
				Cache is working, the fetch duration in server logs should be shorter.
			</p>
			<div className="flex flex-wrap gap-4 max-w-5xl mx-auto justify-center items-center mt-6">
				{characters.results.map(
					(post: { id: number; name: string; image: string }) => (
						<RickandMortyCard key={post.id} name={post.name} url={post.image} />
					)
				)}
			</div>
			<div className="text-center mt-8">
				<Link href="/" className="text-blue-500 hover:underline text-xl">
					Go Back Home
				</Link>
			</div>
		</div>
	);
}

================
File: app/components/CharacterSummary.tsx
================
import { getData } from "../helpers";

const RICK_AND_MORTY_API_URL = "https://rickandmortyapi.com/api/character";

export default async function CharacterSummary() {
	console.log("\n--- [CharacterSummary Component] START ---");
	const data = await getData(RICK_AND_MORTY_API_URL);
	const characterCount = data.results?.length || 0;
	console.log("[CharacterSummary Component] Data processed.");
	console.log("--- [CharacterSummary Component] END ---");

	return (
		<div className="mt-4 p-4 bg-gray-100 rounded-lg text-center">
			<p className="text-lg font-medium text-gray-700">
				Summary: Displaying data for {characterCount} characters.
			</p>
		</div>
	);
}

================
File: app/components/RickandMortyCardProps.tsx
================
import React from "react";
import Image from "next/image";

export interface RickandMortyCardProps {
	name: string;
	url: string;
}

const RickandMortyCard = ({ name, url }: RickandMortyCardProps) => {
	return (
		<div className="border border-gray-200 rounded-xl p-5 m-2 text-center bg-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200 ease-in-out w-56 flex flex-col items-center">
			<Image
				src={url}
				alt={name}
				className="w-32 h-32 mb-4 object-contain"
				width={128}
				height={128}
			/>
			<h3 className="text-xl font-semibold text-gray-800 capitalize">{name}</h3>
		</div>
	);
};

export default RickandMortyCard;

================
File: app/no-store-test/page.tsx
================
/* eslint-disable react/no-unescaped-entities */
import Link from "next/link";
import RickandMortyCard from "../components/RickandMortyCardProps";
import { getData } from "../helpers";

const RICK_AND_MORTY_API_URL = "https://rickandmortyapi.com/api/character";

export default async function NoStoreTestPage() {
	console.log("\n--- [No-Store Test Page Render] START ---");

	console.log("[No-Store Test Page] Attempting fetch with 'no-store'...");
	const characters = await getData(RICK_AND_MORTY_API_URL, {
		cache: "no-store",
	});
	console.log("[No-Store Test Page] Fetch processed.");

	console.log("--- [No-Store Test Page Render] END ---");

	return (
		<div className="p-8">
			<h1 className="text-3xl font-bold mb-6 text-center">
				No-Store Cache Test Page
			</h1>
			<p className="text-center mb-4">
				This page fetches data using <code>cache: 'no-store'</code>. Each
				load/refresh should result in a "long" fetch duration in server logs,
				indicating a fresh network request.
			</p>
			<div className="flex flex-wrap gap-4 max-w-5xl mx-auto justify-center items-center mt-6">
				{characters.results.map(
					(post: { id: number; name: string; image: string }) => (
						<RickandMortyCard key={post.id} name={post.name} url={post.image} />
					)
				)}
			</div>
			<div className="text-center mt-8">
				<Link href="/" className="text-blue-500 hover:underline text-xl mr-4">
					Go Home
				</Link>
				<Link
					href="/cached-page-test"
					className="text-blue-500 hover:underline text-xl"
				>
					Go to Cached Page Test
				</Link>
			</div>
		</div>
	);
}

================
File: app/on-demand-revalidate-test/page.tsx
================
import Link from "next/link";
import { revalidateTag } from "next/cache";
import { getData } from "../helpers";
import RickandMortyCard from "../components/RickandMortyCardProps";

const RICK_AND_MORTY_API_URL = "https://rickandmortyapi.com/api/character";
const ON_DEMAND_TAG = "rick-and-morty-characters";

async function revalidateCharactersAction() {
	"use server";
	console.log(`\n--- [Server Action - revalidateCharactersAction] START ---`);
	console.log(`[Server Action] Attempting to revalidate tag: ${ON_DEMAND_TAG}`);
	revalidateTag(ON_DEMAND_TAG);
	console.log(`[Server Action] Tag ${ON_DEMAND_TAG} revalidation triggered.`);
	console.log(`--- [Server Action - revalidateCharactersAction] END ---`);
}

export async function generateMetadata() {
	console.log(
		"\n--- [generateMetadata - OnDemandRevalidateTestPage] START ---"
	);
	try {
		const data = await getData(RICK_AND_MORTY_API_URL + "?page=1&count=1", {
			tags: [ON_DEMAND_TAG],
		});
		const firstCharacterName = data.results[0]?.name || "Characters";
		console.log(
			"[generateMetadata - OnDemandRevalidateTestPage] Fetch for metadata processed."
		);
		console.log("--- [generateMetadata - OnDemandRevalidateTestPage] END ---");
		return {
			title: `On-Demand Reval: ${firstCharacterName}`,
		};
	} catch (error) {
		console.error(
			"[generateMetadata - OnDemandRevalidateTestPage] Error fetching data:",
			error
		);
		console.log("--- [generateMetadata - OnDemandRevalidateTestPage] END ---");
		return {
			title: "On-Demand Revalidation Test",
		};
	}
}

export default async function OnDemandRevalidateTestPage() {
	console.log("\n--- [OnDemandRevalidateTestPage Component Render] START ---");
	const serverRenderTime = new Date().toLocaleTimeString();

	console.log(
		`[OnDemandRevalidateTestPage] Fetching data with tag: ${ON_DEMAND_TAG}`
	);
	const characters = await getData(RICK_AND_MORTY_API_URL, {
		tags: [ON_DEMAND_TAG],
	});
	console.log("[OnDemandRevalidateTestPage] Data fetched.");
	console.log(
		`[OnDemandRevalidateTestPage] Page rendered at: ${serverRenderTime}`
	);
	console.log("--- [OnDemandRevalidateTestPage Component Render] END ---");

	return (
		<div className="p-8">
			<h1 className="text-3xl font-bold mb-2 text-center">
				On-Demand Revalidation Test (<code>revalidateTag</code>)
			</h1>
			<p className="text-center mb-1">
				Page Server-Rendered at:{" "}
				<span className="font-semibold">{serverRenderTime}</span>
			</p>
			<p className="text-center mb-4">
				This page fetches Rick and Morty characters. The data is tagged with{" "}
				<code>{ON_DEMAND_TAG}</code>. Click the button below to trigger
				revalidation for this tag. Observe server logs and the timestamp above.
			</p>

			<form action={revalidateCharactersAction} className="text-center mb-6">
				<button
					type="submit"
					className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded text-lg"
				>
					Revalidate Characters (Tag: {ON_DEMAND_TAG})
				</button>
			</form>

			<div className="flex flex-wrap gap-4 max-w-5xl mx-auto justify-center items-center mt-6">
				{characters.results
					.slice(0, 6)
					.map((character: { id: number; name: string; image: string }) => (
						<RickandMortyCard
							key={character.id}
							name={character.name}
							url={character.image}
						/>
					))}
			</div>
			<div className="text-center mt-8 flex gap-4 justify-center">
				<Link href="/" className="text-blue-500 hover:underline text-xl">
					Go Home
				</Link>
				<Link
					href="/revalidate-test"
					className="text-blue-500 hover:underline text-xl"
				>
					Go to Time-Based Revalidate Test
				</Link>
			</div>
		</div>
	);
}

================
File: app/revalidate-test/page.tsx
================
import Link from "next/link";
import { getData } from "../helpers";
import Image from "next/image";

const DOG_API_URL = `https://dog.ceo/api/breeds/image/random`;
const REVALIDATE_SECONDS = 15;

export default async function RevalidateTestPage() {
	console.log(
		`\n--- [Revalidate Test Page (Dog API, revalidate: ${REVALIDATE_SECONDS}s)] START ---`
	);

	console.log(
		"[Revalidate Test Page] Attempting fetch with time-based revalidation..."
	);

	const dogData = await getData(DOG_API_URL, {
		revalidateTime: REVALIDATE_SECONDS,
	});
	console.log("[Revalidate Test Page] Fetch processed.");

	const serverRenderTime = new Date().toLocaleTimeString();
	console.log(`[Revalidate Test Page] Page rendered at: ${serverRenderTime}`);
	const imageUrl = dogData?.message;
	const apiStatus = dogData?.status;

	console.log(
		`--- [Revalidate Test Page (Dog API, revalidate: ${REVALIDATE_SECONDS}s)] END ---`
	);

	return (
		<div className="p-8">
			<h1 className="text-3xl font-bold mb-6 text-center">
				Time-Based Revalidation Test ({REVALIDATE_SECONDS}s) - Dog API
			</h1>
			<p className="text-center mb-2">
				Fetching a random dog image with{" "}
				<code>next: {"{ revalidate: REVALIDATE_SECONDS }"}</code>.
			</p>
			<p className="text-center mb-4">
				Observe image change after revalidation window.
			</p>
			<p className="text-center mb-4 text-lg text-gray-500">
				Page Server-Rendered at: {serverRenderTime}
			</p>
			{apiStatus === "success" && imageUrl && (
				<div className="flex flex-col items-center">
					<p className="text-sm mb-2">Image URL: {imageUrl}</p>
					<Image
						src={imageUrl}
						alt="A random dog"
						width={400}
						height={300}
						priority
						className="rounded-lg shadow-md object-contain max-h-80"
					/>
				</div>
			)}
			{apiStatus !== "success" && (
				<p className="text-center text-red-500">Could not fetch dog image.</p>
			)}
			<div className="text-center mt-8">
				<Link href="/" className="text-blue-500 hover:underline text-xl">
					Go Home
				</Link>
			</div>
		</div>
	);
}

================
File: app/globals.css
================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: app/helpers.ts
================
export const getData = async (
	apiUrl: string = "https://rickandmortyapi.com/api/character",
	options?: {
		tags?: string[];
		revalidateTime?: number;
	}
) => {
	console.log(`[Server Helper - getData] Called for: ${apiUrl}`);
	const fetchNextOptions: { tags?: string[]; revalidate?: number } = {};
	const fetchInit: RequestInit = {};

	if (options?.tags && options.tags.length > 0) {
		console.log(
			`[Server Helper - getData] Using tags: ${options.tags.join(", ")}`
		);
		fetchNextOptions.tags = options.tags;
	}
	if (typeof options?.revalidateTime === "number") {
		console.log(
			`[Server Helper - getData] Using revalidateTime: ${options.revalidateTime}s`
		);
		fetchNextOptions.revalidate = options.revalidateTime;
	}

	if (Object.keys(fetchNextOptions).length > 0) {
		fetchInit.next = fetchNextOptions;
	}
	console.log(
		`[Server Helper - getData] fetch() called with init options: ${JSON.stringify(
			fetchInit
		)}`
	);

	const startTime = performance.now();

	const response = await fetch(apiUrl, fetchInit);

	const endTime = performance.now();
	const duration = (endTime - startTime).toFixed(2);

	console.log(
		`[Server Helper - getData] fetch() for ${apiUrl} completed. Duration: ${duration}ms. Status: ${response.status}`
	);

	if (!response.ok) {
		console.error(`[Server Helper - getData] API request failed for ${apiUrl}`);
		throw new Error(
			`Failed to fetch data from ${apiUrl}. Status: ${response.status}`
		);
	}

	const data = await response.json();
	console.log(`[Server Helper - getData] JSON parsing complete for ${apiUrl}.`);
	return data;
};

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
import Link from "next/link";
import RickandMortyCard from "./components/RickandMortyCardProps";
import { getData } from "./helpers";

const RICK_AND_MORTY_API_URL = "https://rickandmortyapi.com/api/character";

export default async function Home() {
	console.log("\n--- [Home Page Render - Data Cache Demo] START ---");

	console.log("[Home Page] Attempting initial fetch to populate cache...");
	const characters = await getData(RICK_AND_MORTY_API_URL);
	console.log("[Home Page] Initial fetch processed.");

	console.log("--- [Home Page Render - Data Cache Demo] END ---");

	return (
		<div className="p-8">
			<h1 className="text-3xl font-bold mb-6 text-center">
				Home Page (Data Cache Populator)
			</h1>
			<p className="text-center mb-4">
				This page fetches data, populating the Data Cache. Check server logs for
				fetch duration.
			</p>
			<div className="flex flex-wrap gap-4 max-w-5xl mx-auto justify-center items-center mt-6">
				{characters.results.map(
					(post: { id: number; name: string; image: string }) => (
						<RickandMortyCard key={post.id} name={post.name} url={post.image} />
					)
				)}
			</div>
			<div className="text-center mt-8 flex gap-4 justify-center">
				<Link
					href="/cached-page-test"
					className="text-blue-500 hover:underline text-xl"
				>
					Go to Cached Page Test
				</Link>
				<Link
					href="/no-store-test"
					className="text-blue-500 hover:underline text-xl"
				>
					Go to No-Store Test
				</Link>
				<Link
					href="/revalidate-test"
					className="text-blue-500 hover:underline text-xl"
				>
					Go to Revalidate Test
				</Link>
				<Link
					href="/on-demand-revalidate-test"
					className="text-blue-500 hover:underline text-xl"
				>
					Go to On-Demand Revalidate Test
				</Link>
			</div>
		</div>
	);
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
	/* config options here */
	images: {
		remotePatterns: [
			{
				protocol: "https",
				hostname: "rickandmortyapi.com",
			},
			{
				protocol: "https",
				hostname: "images.dog.ceo",
			},
		],
	},
};

export default nextConfig;

================
File: package.json
================
{
	"name": "request-memoization",
	"version": "0.1.0",
	"private": true,
	"scripts": {
		"dev": "NODE_OPTIONS='--inspect' next dev",
		"build": "next build",
		"start": "next start",
		"lint": "next lint"
	},
	"dependencies": {
		"react": "^19.0.0",
		"react-dom": "^19.0.0",
		"next": "15.3.2"
	},
	"devDependencies": {
		"typescript": "^5",
		"@types/node": "^20",
		"@types/react": "^19",
		"@types/react-dom": "^19",
		"@tailwindcss/postcss": "^4",
		"tailwindcss": "^4",
		"eslint": "^9",
		"eslint-config-next": "15.3.2",
		"@eslint/eslintrc": "^3"
	}
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
